{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jumpstart: Deploy a Java Microservices Application to <code>Code Engine</code>","text":"<p>Attention: Outdated! Doesn't work fully correctly anymore!</p>"},{"location":"#objectives","title":"Objectives","text":"<p>The workshop addresses the topic containerized applications on <code>IBM Cloud Code Engine</code>. (GitHub project) After you complete this workshop, you'll have a basic understanding of the following:</p> <ul> <li>Deploy an existing Java microservices <code>containerized</code> application example to <code>Code Engine</code><ul> <li>See the usage of the <code>IBM Cloud Code Engine CLI</code></li> </ul> </li> <li>Understand internal and external <code>HTTP/HTTPS routing</code> between the microservices</li> <li>Use the <code>Out-Of-The-Box</code> monitoring for the example application</li> <li>Use the <code>Out-Of-The-Box</code> logging for the example application</li> </ul> <p>The scope of this workshop is not to explain every aspect of running an application or job on <code>Code Engine</code>. It's just about containerized applications.</p> <p>Here is a <code>1-hour</code> YouTube <code>live stream</code> on IBM Developer</p> <p></p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>To run this workshop, you will need to create an IBM Cloud <code>PayAsYouGo</code> account (or log in to your existing account).</li> </ul> <p><code>Code Engine</code> has a <code>free tier</code> per month, and we expect, if you haven't used that <code>free tier</code> in current month, you can execute the workshop without creating any additional costs. For the monitoring and logging we will use free lite plans for the service instances IBM Cloud Monitoring and   IBM Cloud Log Analysis.</p> <ul> <li>You should have a basic understanding of containerized applications</li> </ul>"},{"location":"#estimated-time-and-level","title":"Estimated time and level","text":"Time Level 1 h beginners"},{"location":"#architecture","title":"Architecture","text":"<p>This <code>workshop</code> is related to the Cloud Native Starter project. In the workshop we use a customized version of the security application example. </p> <p>The example application simply shows articles protected with an <code>Identity and Access Management</code>. In the following picture you see the frontend with the articles and the valid user <code>alice</code> is logged on.</p> <p></p> <p>The following diagram shows the architecture of the example application. There is a <code>web-app</code> frontend application that serves the JavaScript/Vue.js code to the browser. The <code>web-app</code> code running in the browser invokes a REST API of the <code>web-api</code> microservice. The <code>web-api</code> microservice in turn invokes a REST API of the <code>articles</code> microservice. <code>Keycloak</code> is used for the <code>Identity and Access Management</code> of that microservices based application. To see the results in the web application, users need to be authenticated and they need to have the role <code>user</code>.</p> <p>The image below shows the dependencies of the example:</p> <p></p> <ul> <li>External and internal routing</li> </ul> <p>In our context it's useful to have a basic understanding of the routing for example application. Based on the functionality of the application, we need <code>three external routes</code> for the example application.</p> <p>Each external route communication will be automatically secured with a TLS Encryption created by <code>Code Engine</code> using Let's encrypt. The three applications are the <code>web-app</code> which will be loaded into the browser, the <code>Keycloak</code> that must be available for the authentication/authorization to our application and for potential configuration the <code>Identity and Access Management</code> and finally the <code>web-api</code> microservice which provides the articles data and will be invoked be the <code>web-app</code>.</p> <p>The <code>articles</code> microservice doesn't need to be invoked from external, so it's configured to provide only an <code>internal route</code>, which is used by the  <code>web-api</code> microservice to get the articles from.</p> <ul> <li>Basics about the deployment</li> </ul> <p>For an easy deployment prebuild containers were created and pushed to a Quay container registry. In the following table you see the application/container, the exposed routes, uses of TLS Encryption, the scale to zero configuration, the container registry where the prebuild container comes from, the configuration for vCPU and Memory in GB and the min/max Instances for the applications.</p> Application Route TLS Encryption Scale to zero Container Registry vCPU Memory min Instances max Instances web-app external yes yes Quay 0.5 1 GB 0 1 keycloak external yes no Quay 0.5 1 GB 1 1 web-api external yes yes Quay 0.5 1 GB 0 1 articles internal no (mTLS coming sone) yes Quay 0.25 0.5G GB 0 1 <p>The <code>Keycloak</code> application for the <code>Identity and Access Management</code> isn't configured to <code>scale to zero</code>, because the application is <code>stateful</code> and contains the realm configuration, which will be deleted, if you would restart the application.</p> <p>Note: The project also contains the source code, that you can use to customize to your an own version of the microservices based example application.</p>"},{"location":"#about-this-workshop","title":"About this workshop","text":""},{"location":"#agenda","title":"Agenda","text":"<p>These are the sections of this workshop, go through all of them in sequence, start with <code>Lab 1. Setup the example application</code> :</p> <ol> <li>Setup the example application</li> <li>Inspect the <code>Code Engine</code> project</li> <li>Monitoring of the applications</li> <li>Logging of the applications</li> <li>Cleanup the example application</li> </ol> <p>Optional Labs: </p> <ol> <li>Run the example application locally</li> <li>Push the example containers to a container registry</li> <li>Use IBM Cloud App ID for the example application</li> <li>Use Code Engine to build a container image</li> </ol>"},{"location":"#compatibility","title":"Compatibility","text":"<p>The workshop uses following IBM Cloud Services:</p> <ul> <li>IBM Cloud Code Engine</li> <li>IBM Cloud Monitoring (lite plan)</li> <li>IBM Cloud Log Analysis (lite plan)</li> </ul> <p><code>IBM Cloud</code>Code Engine` is built on Open Source](https://en.wikipedia.org/wiki/Open_source) technologies:</p> <ul> <li>Knative</li> <li>Kubernetes</li> <li>Istio</li> <li>Tekton</li> </ul>"},{"location":"#technology-used","title":"Technology Used","text":"<p>The example microservices application example is built with the following <code>technologies/</code>tools/frameworks`.</p> <ul> <li>Microservices architecture</li> <li>Keycloak</li> <li>Jakarta EE</li> <li>MicroProfile</li> <li>Quarkus</li> <li>Vue.js</li> <li>NGINX</li> <li>git 2.24.1 or higher</li> <li>yarn 1.22.4 or higher</li> <li>Node.js v14.6.0 or higher</li> <li>Apache Maven 3.6.3</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Thomas S\u00fcdbr\u00f6cker</li> <li>Niklas Heidloff (Feedback and Cloud Native Starter project)</li> <li>Simon Moser (Feedback)</li> <li>Doug Davis (Feedback)</li> </ul>"},{"location":"#additional-resources","title":"Additional resources","text":"<ul> <li> <p>IBM CLoud Code Engine:</p> <ul> <li>Examples on GitHub</li> <li>Code Engine CLI reference</li> </ul> </li> <li> <p>Cloud Native Starter example source code:</p> <ul> <li>Cloud-Native-Starter project</li> <li>Cloud-Native-Starter project security</li> </ul> </li> <li> <p>Keycloak</p> <ul> <li>Keycloak core concepts of open-source identity and access management</li> <li>Setting up Keycloak in OpenShift</li> <li>Security in Quarkus Applications via Keycloak</li> <li>Securing Vue.js Applications with Keycloak</li> <li>Simply logout from Keycloak</li> <li>How to create a new realm with the Keycloak REST API</li> </ul> </li> <li> <p>Quarkus</p> <ul> <li>How to use environment variables to make a containerized Quarkus application more flexible</li> <li>Configure the attach debug for Quarkus in Visual Studio Code</li> </ul> </li> <li> <p>Vue.js</p> <ul> <li>Use environment variables to make a containerized Vue.js frontend application more flexible and deploy it to Code Engine</li> <li>How to debug the Javascript code of a Vue.js application using Visual Studio Code</li> </ul> </li> </ul>"},{"location":"app-id-optional/","title":"Optional Lab 3: Run the example application with App ID","text":"<p>Attention: Outdated! Doesn't work fully correctly anymore!</p> <p>In this optional lab, we use an IBM Cloud App ID service instance for authentication and authorization.</p> <p>We will create an IBM Cloud App ID service instance using a \"lite\" plan, this plan type does not create additional costs for us.</p> <p>Currently this lab is not documented very detailed. It's designed to be a part of a live session. You find the source code here.</p>"},{"location":"app-id-optional/#architecture","title":"Architecture","text":"<p>Here is a simplified architecture diagram which shows the Web-App and the two microservices Web-API and Articles and App ID are running on IBM Cloud.</p> <ul> <li> <p>Code Engine applications</p> <ul> <li>Web-App</li> <li>Web-API </li> <li>Articles</li> </ul> </li> <li> <p>IBM Cloud services</p> <ul> <li>App ID</li> </ul> </li> </ul> <p></p>"},{"location":"app-id-optional/#deploy-the-example-application-with-app-id","title":"Deploy the example application with App ID","text":""},{"location":"app-id-optional/#optional-step-1-clone-the-github-project-to-the-ibm-cloud-shell","title":"(optional) Step 1: Clone the GitHub project to the <code>IBM Cloud Shell</code>","text":"<p>Only needed, if you haven't done it before.</p> <p>Insert these commands to clone the GitHub project to the <code>IBM Cloud Shell</code>.</p> <pre><code>git clone https://github.com/ibm/ce-cns.git\ncd ce-cns\nROOT_FOLDER=$(pwd)\n</code></pre>"},{"location":"app-id-optional/#optional-step-2-now-set-the-environment-variable-for-later-usage","title":"(optional) Step 2: Now set the environment variable for later usage","text":"<p>Only needed, if you haven't done it before.</p> <p>REMEMBER! Your Code Engine project name is <code>cloud-native-starter-[YOUR-EXTENTION]</code></p> <pre><code>export MYPROJECT=cloud-native-starter-[YOUR-EXTENTION]\n</code></pre> <p>Optional setting:</p> <pre><code>export RESOURCE_GROUP=[YOUR-GROUP]\nexport REGION=[YOUR-REGION]\n</code></pre> <p>Log on to IBM Cloud!</p> <pre><code>ibmcloud login  -g $RESOURCE_GROUP -r $REGION (-sso Optional)\n</code></pre>"},{"location":"app-id-optional/#step-3-execute-following-bash-automation","title":"Step 3: Execute following bash automation","text":"<p>Be patient, because the script may take several minutes (up to 10 min).</p> <pre><code>cd $ROOT_FOLDER/CE\nbash appid-ce-deploy-apps.sh\n</code></pre>"},{"location":"app-id-optional/#step-4-simplified-steps-of-the-bash-script","title":"Step 4: Simplified steps of the bash script","text":"<p>Here are the simplified steps that are carried out in the bash script using mainly the IBM Cloud <code>Code Engine CLI</code>:</p> <ol> <li>Connect to the <code>Code Engine project</code> with the  Code Engine CLI and get the namespace for later usage to define the internal route.</li> <li>Create an <code>App ID</code> instance</li> <li>Configure the <code>App ID</code> instance</li> <li>Deploy <code>articles</code> microservice which is defined as <code>local cluster</code> here, we need to know the <code>namespace</code>. (details are related to Knative)</li> <li>Deploy <code>web-api</code> with the needed <code>App ID</code> and <code>articles</code> urls as environment variables.</li> <li>Deploy <code>web-app</code> with the needed <code>App ID</code> and <code>web-api</code> urls as environment variables.</li> </ol>"},{"location":"app-id-optional/#step-5-inspect-the-output","title":"Step 5: Inspect the output","text":"<p>The relevant URLs will be listed.</p> <pre><code>************************************\n URLs\n************************************\n - oAuthServerUrl   : https://us-south.appid.cloud.ibm.com/oauth/v4/40874513-becf-48ed-802d-19dc2188e156\n - discoveryEndpoint: https://us-south.appid.cloud.ibm.com/oauth/v4/40874513-becf-48ed-802d-19dc2188e156/.well-known/openid-configuration\n - Web-API          : https://web-api-appid.eqiatmmvvti.us-south.codeengine.appdomain.cloud/articlesA\n - Articles         : http://articles-appid.eqiatmmvvti.svc.cluster.local/articlesA\n - Web-App          : https://web-app-appid.eqiatmmvvti.us-south.codeengine.appdomain.cloud\n</code></pre>"},{"location":"app-id-optional/#step-6-open-the-example-web-app-application-in-your-browser","title":"Step 6: Open the example <code>web-app</code> application in your browser","text":"<p>Use <code>user: thomas@example.com</code> and <code>password: thomas4appid</code> for the logon.</p> <p></p>"},{"location":"app-id-optional/#step-7-show-the-sample-articles","title":"Step 7: Show the sample articles","text":"<p>Maybe you need to reload or log on again, to get all applications up and running in Code Engine.</p> <p></p>"},{"location":"app-id-optional/#step-8-clean-up","title":"Step 8: Clean-up","text":"<pre><code>cd $ROOT_FOLDER/CE\nbash appid-ce-clean-up.sh\n</code></pre> <p>Congratulations, you have successfully completed this optional hands-on lab tasks for <code>Run the example application with App ID</code> section of the workshop. Awesome </p>"},{"location":"build-container-image/","title":"Optional Lab 4: Use Code Engine to build a container image","text":"<p>In this optional lab we will build and push the <code>web-app</code> container image to the IBM Cloud Registry. The IBM Cloud Registry has a free lite plan with limited resources of Storage (Gigabyte-Months):</p> <ul> <li>0.5 GB free per month and pull traffic (Gigabytes) </li> <li>5 GB free per month. </li> </ul> <p>Please visit the IBM Cloud Registry catalog for the current pricing.</p> <p>After the creation of the <code>web-app</code> container image and when the image is saved in the IBM Cloud Registry, we can simply replace the <code>Container image reference</code> for the <code>web-app</code> application in Code Engine in a new configuration. The following image shows a new <code>Container image reference</code> value <code>us.icr.io/cns-code-engine/web-app-image:v1</code> inside a newly created configuration <code>web-app-00004</code>.</p> <p></p>"},{"location":"build-container-image/#architecture","title":"Architecture","text":"<p>The following simplified architecture diagram show the dependencies of the <code>Code Engine project</code>, the <code>IBM Cloud Container Registry</code>, the <code>Quay Container Registry</code>, the <code>IBM Cloud Logging</code>, the <code>\u00ccBM Cloud Monitoring</code> and <code>the GitHub project</code>.</p> <p></p>"},{"location":"build-container-image/#steps","title":"Steps","text":""},{"location":"build-container-image/#step-1-create-an-ibm-cloud-container-image-namespaceopen-the-following-link","title":"Step 1: Create an IBM Cloud Container image <code>Namespace</code>Open the following link:","text":"<pre><code>```sh\nhttps://cloud.ibm.com/registry/namespaces\n```\n</code></pre> <ol> <li> <p>Select Location <code>Dallas</code> and press <code>Create</code></p> </li> <li> <p>Enter for Name <code>cns-code-engine</code> and press <code>Create</code></p> <p></p> </li> <li> <p>Verify the created Namespace</p> <p></p> </li> </ol>"},{"location":"build-container-image/#step-2-start-to-create-a-registry-access-in-your-code-engine-project","title":"Step 2: Start to create a <code>Registry access</code> in your Code Engine project","text":"<ol> <li> <p>Open <code>Registry access</code> in your Code Engine project and press <code>Create</code></p> <p></p> </li> <li> <p>Enter and select following values:</p> <ul> <li>Registry source: <code>Custom</code> </li> <li>Registry name: <code>ibm-container-registry</code></li> <li>Registry server: <code>us.icr.io</code></li> <li>As you see, we need an <code>IAM API Key</code>. So we leave this browser tab open and we create a new browser tab. Open the following link in the new browser tab</li> </ul> <pre><code>https://cloud.ibm.com/iam/apikeys\n</code></pre> </li> <li> <p>Press <code>Create an IBM Cloud API key</code></p> <p></p> </li> <li> <p>Insert following value and select <code>Create</code></p> <ul> <li>Name: <code>code-engine IBM Cloud API key</code></li> </ul> <p></p> </li> <li> <p>Copy <code>IBM Cloud API key</code> to clipboard</p> <p></p> </li> <li> <p>Go back to the <code>Registry access</code> tab, insert the copied <code>IBM Cloud API key</code> and press <code>Create</code></p> <p></p> </li> <li> <p>Verify the newly created <code>Registry access</code></p> <p></p> </li> </ol>"},{"location":"build-container-image/#step-3-start-to-create-a-image-build-in-your-code-engine-project","title":"Step 3: Start to create a <code>Image build</code> in your <code>Code Engine project</code>","text":"<ol> <li> <p>Open <code>Image builds</code> in your Code Engine project and press <code>Create</code></p> <p></p> </li> <li> <p>The <code>Specify build details</code> wizard appears, which contains three steps <code>Sources</code>, <code>Strategy</code> and <code>Output</code>.</p> </li> <li> <p>Insert the following values for <code>Sources</code> and press <code>Next</code></p> <ul> <li>Name: <code>web-app-image</code></li> <li>Code repo URL: <code>https://github.com/IBM/ce-cns</code></li> <li>Code repo access: <code>Public</code></li> <li>Branch name: <code>master</code></li> <li>Context directory: <code>./code/web-app</code></li> </ul> </li> <li> <p>Insert or select following values for <code>Strategy</code> and press <code>Next</code></p> <ul> <li>Strategy: <code>Dockerfile</code></li> <li>Dockerfile: <code>Dockerfile.os4-webapp</code></li> <li>Timeout: <code>10m</code></li> <li>Build resources: <code>Small (0.5 vCPU/ 2 GB)</code></li> </ul> <p></p> </li> <li> <p>Insert or select the following values for <code>Output</code> and press <code>Done</code></p> <ul> <li>Registry server: <code>us.icr.io</code></li> <li>Registry access: <code>ibm-container-registry</code></li> <li>Namespace: <code>cns-code-engine</code></li> <li>Repository (image name): <code>web-app-image</code></li> <li>Tag: <code>v1</code></li> </ul> <p></p> </li> </ol>"},{"location":"build-container-image/#step-4-now-create-the-container-image","title":"Step 4: Now create the container image","text":"<ol> <li> <p>Press <code>Submit build</code></p> <p></p> </li> <li> <p>The <code>Build run</code> dialog appears. </p> <p>Verify the <code>Output image</code> value <code>us.icr.io/cns-code-engine/web-app-image:v1</code> and press <code>Submit build</code> again.</p> <p></p> </li> <li> <p>Open the current <code>Build run</code> </p> <p></p> </li> <li> <p>Open the current <code>Build run</code> and observe the progress</p> <p></p> </li> <li> <p>Verify the created image</p> <p></p> </li> </ol> <p>Congratulations, you have successfully completed this optional hands-on lab tasks for <code>Use Code Engine to build a container image</code> section of the workshop. Awesome </p>"},{"location":"cleanup-example/","title":"Lab 5: Cleanup the project","text":"<p>We will delete all applications from your <code>Code Engine</code> project. Remember, the Keycloak application for the <code>Identity and Access Management</code> isn't configured to <code>scale to zero</code>, because the application is <code>stateful</code> and contains the realm configuration, which will be deleted, if you restart the application. Here we just delete all applications to avoid additional costs for you. </p> <p>Note: You can also use the UI, in that Lab we use a bash script using the IBM Cloud Code Engine CLI</p>"},{"location":"cleanup-example/#step-1-open-the-ibm-cloud-shell","title":"Step 1: Open the <code>IBM Cloud Shell</code>","text":"<p>Use the following link to directly open the <code>IBM Cloud Shell</code>.</p> <p>https://cloud.ibm.com/shell</p> <p>Alternatively, you can open the IBM Cloud Shell in your Browser by logging in to the IBM Cloud Dashboard and opening it from there.</p> <p></p>"},{"location":"cleanup-example/#step-2-ibm-cloud-shell","title":"Step 2: <code>IBM Cloud Shell</code>","text":"<p>Now you are logged on with your IBM Cloud account.</p> <p></p>"},{"location":"cleanup-example/#step-3-optional-clone-the-github-project-to-the-ibm-cloud-shell","title":"Step 3: (Optional) Clone the GitHub project to the <code>IBM Cloud Shell</code>","text":"<p>In case your <code>IBM Cloud Shell</code> session has expired it might be possible that the cloned project was deleted. If this happens, you need to clone the project again, because we will be using a bash script for the deletion of the project.</p> <pre><code>git clone https://github.com/thomassuedbroecker/ce-cns.git\ncd ce-cns\nROOT_FOLDER=$(pwd)\n</code></pre>"},{"location":"cleanup-example/#step-4-now-set-the-environment-variable-for-later-usage","title":"Step 4: Now set the environment variable for later usage","text":"<p>REMEMBER! Code Engine project name <code>cloud-native-starter-[YOUR-EXTENTION]</code></p> <pre><code>cd $ROOT_FOLDER/CE\nexport MYPROJECT=cloud-native-starter-[YOUR-EXTENTION]\n</code></pre>"},{"location":"cleanup-example/#step-5-execute-the-following-bash-automation","title":"Step 5: Execute the following bash automation","text":"<p>Relevant to your configuration are the following variables in the bash script:</p> <pre><code>export PROJECT_NAME=$MYPROJECT #your project name\nexport RESOURCE_GROUP=default #the resource group you defined during the creation of the project\nexport REPOSITORY=tsuedbroecker #the name of the public container repository on Quay\nexport REGION=\"us-south\" #the region with is used when you choose Dallas as location during the creation of the project\n</code></pre>"},{"location":"cleanup-example/#step-6-inspect-the-execution-output","title":"Step 6: Inspect the execution output","text":"<p>The following shows an example execution result of the bash script.</p> <pre><code>************************************\n Here are your remaing applications in your project cloud-native-starter-tsuedbro\n************************************\nListing all applications...\nOK\n</code></pre> <p>Congratulations, you have successfully completed this hands-on workshop. Awesome you did it  </p>"},{"location":"inspect-the-project/","title":"Lab 2: Inspect the <code>Code Engine</code> project","text":""},{"location":"inspect-the-project/#step-1-open-the-code-engine-project","title":"Step 1: Open the <code>Code Engine</code> project","text":"<p>Use the following link to directly navigate to the Code Engine projects and open the created project.</p> <p>https://cloud.ibm.com/codeengine/projects</p> <p></p>"},{"location":"inspect-the-project/#step-2-select-overview","title":"Step 2: Select <code>Overview</code>","text":"<p>In the following image, you see: The summary contains the Applications, Jobs, Image builds, Registry access, Secrets and Configmaps. In our case only the four applications are relevant. 2. The current usage of our application.</p> <p></p>"},{"location":"inspect-the-project/#step-3-select-applications","title":"Step 3: Select <code>Applications</code>","text":"<p>Here you find an overview of the currently running applications. (FYI The <code>Code Engine</code> definition for an application: <code>A program that serves HTTP requests</code>)</p> <p></p>"},{"location":"inspect-the-project/#step-4-open-the-web-api-application","title":"Step 4: Open the <code>web-api</code> application","text":"<p>Here we see three tabs for the application. </p> <ul> <li>Overview</li> <li>Configuration</li> <li>Endpoints</li> </ul> <p>The <code>overview tab</code> shows the number of the running instances and the revisons of the configuration for those instances.</p> <p></p>"},{"location":"inspect-the-project/#step-5-inspect-the-configurations-tab","title":"Step 5: Inspect the configurations tab","text":"<p>Here we find four tabs used to configure the application instance on <code>Code Engine</code>.</p> <ul> <li>First, select the <code>Code</code> tab. Here you see our container image reference to the Quay container registry.</li> </ul> <p></p> <ul> <li>Then select the <code>Runtime</code> tab. It displays the configuration for the instances, vCPU, memory and requests. </li> </ul> <p>Note: The maximum number of requests that can be processed concurrently per instance. This value is optional. The default value is 100.</p> <p></p> <p>Note: For more details about valid vCPU and Memory combinations please visit the documentation here .</p> <ul> <li>Now select the <code>Environment variables</code> tab. </li> </ul> <p>Here you see the routes for the <code>wep-api</code> microservice to set up the connections internal <code>articels</code> microservice and the external <code>Keycloak</code> application.</p> <p></p> <ul> <li>In the  <code>Command overrides</code> tab. </li> </ul> <p></p> <p>A short extract of the Code Engine documentation:</p> <p>\"These metadata fields are called Entrypoint and Command. For those users who are familiar with Dockerfile, the fields equate to the ENTRYPOINT and CMD commands. These two fields contain arrays of strings that are combined to create the command line that is used when you run your container.\"</p> <p>For details visit the IBM Cloud documentation.</p>"},{"location":"inspect-the-project/#step-6-endpoints-tab","title":"Step 6: Endpoints tab","text":"<p>Here you can change the <code>endpoint</code> visibility. For our <code>web-api</code> application, we need public visibility because the application is invoked by our <code>web-app</code> frontend.</p> <p></p>"},{"location":"inspect-the-project/#step-7-verify-the-code-engine-cli-application-instance-configuration","title":"Step 7: Verify the <code>Code Engine CLI</code> application instance configuration","text":"<p>In the following code you see the <code>Code Engine CLI</code> invocation for the <code>web-api</code> microservice, this code is used in the bash script to create a Code Engine application instance. It reflects what you have seen in the <code>Code Engine UI</code>.</p> <p>Note: The only difference is the threshold of concurrent requests per instance at which one or more additional instances are created is defined. Use this value to scale up instances based on concurrent number of requests. If <code>--concurrency-target</code> is not specified, this option defaults to the value of the <code>--concurrency</code> option. This value is optional. The default value is <code>0</code>.</p> <pre><code># Valid vCPU and memory combinations: https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo\n    ibmcloud ce application create --name web-api \\\n                                --image \"quay.io/$REPOSITORY/web-api-ce:v7\" \\\n                                --cpu \"0.5\" \\\n                                --memory \"1G\" \\\n                                --env QUARKUS_OIDC_AUTH_SERVER_URL=\"$KEYCLOAK_URL/auth/realms/quarkus\" \\\n                                --env CNS_ARTICLES_URL=\"http://articles.$PROJECT_NAMESPACE.svc.cluster.local/articles\" \\\n                                --max-scale 1 \\\n                                --min-scale 0 \\\n                        --concurrency-target 100 \\\n                                --port 8081\n</code></pre>"},{"location":"inspect-the-project/#step-8-estimate-cost","title":"Step 8: Estimate cost","text":"<p>You can easily estimate the cost for your Code Engine application.  Just select <code>estimate cost</code> and configure your region, cpu and storage,  estimated monthly runtime for your application and the number of application instances. For more details visit the IBM Cloud documentation.</p> <p></p> <p>Congratulations, you have successfully completed this hands-on lab <code>Inspect the Code Engine project</code> of the workshop. Awesome </p>"},{"location":"known-issues/","title":"Known issues","text":""},{"location":"known-issues/#1-error-message-from-keycloak-appears-when-you-invoke-the-web-app","title":"1. Error message from Keycloak  appears, when you invoke the <code>web-app</code>","text":"<p>When you get the following error message from Keycloak, after you invoked the <code>web-app</code> url, something went wrong during the Keycloak configuration at the setup. One reason could be, that the <code>Keycloak</code> container was restarted after the <code>Keycloak</code> configuration and the container lost the needed <code>realm</code> configuration for the example application.</p> <p></p> <p>Keycloak needs to be reconfigured.</p> <ul> <li>Ensure you set project name</li> </ul> <pre><code>export MYPROJECT=cloud-native-starter-[YOUR-EXTENTION]\n</code></pre> <ul> <li>Execute the <code>ce-reconfigure-keycloak.sh</code> bash script</li> </ul> <pre><code>cd $ROOT_FOLDER/CE\nbash ce-reconfigure-keycloak.sh\n</code></pre>"},{"location":"known-issues/#2-timeout-message-appears-after-loggin-in","title":"2. Timeout message appears, after loggin in","text":"<p>If the following error message persists after refreshing your Browser multiple times, we will ensure that the <code>articles</code> service will run continously with one instance.</p> <p></p> <p>To fix the issue, we will change the configuration of the <code>articles</code> service.</p>"},{"location":"known-issues/#step-1-open-the-following-link-to-access-your-projects-and-from-there-click-on-the-project-you-created","title":"Step 1: Open the following link to access your projects and from there click on the project you created.","text":"<p>https://cloud.ibm.com/codeengine/projects</p> <p>Note: Your project should be named <code>cloud-native-starter-[YOUR-EXTENTION]</code></p>"},{"location":"known-issues/#step-2-click-on-your-project-and-select-applications","title":"Step 2: Click on your project and select <code>Applications</code>.","text":""},{"location":"known-issues/#step-3-open-the-articles-application","title":"Step 3: Open the <code>articles</code> application","text":""},{"location":"known-issues/#step-4-open-the-configuration-tab-and-select-runtime","title":"Step 4: Open the <code>Configuration</code> tab, and select <code>Runtime</code>.","text":""},{"location":"known-issues/#step-5-click-on-edit-and-create-new-revision","title":"Step 5: Click on <code>Edit and create new revision</code>","text":"<p>Now you change the <code>Min number of instances</code> from 0 to 1. This ensures, that the <code>articles</code> service is permanently available for the <code>web-api</code> service.</p> <p></p>"},{"location":"known-issues/#step-6-press-the-save-and-create-button","title":"Step 6: Press the <code>Save and create</code> Button","text":"<p>This creates a new configuration for the <code>articles</code> application as you can see in the <code>Overview</code> tab under <code>Configuration revisions</code>.</p> <p></p>"},{"location":"known-issues/#3-issues-with-multiple-accounts","title":"3. Issues with multiple Accounts","text":"<p>If you have multiple <code>IBM Cloud</code> accounts, please verify that the account logged in to the <code>Code Engine</code> dashboard matches the account logged in to the <code>IBM Cloud Shell</code>.</p>"},{"location":"known-issues/#step-1-verify-account-logged-in-to-the-code-engine-dashboard","title":"Step 1: Verify account logged in to the <code>Code Engine</code> dashboard","text":""},{"location":"known-issues/#step-2-verify-account-logged-in-to-the-ibm-cloud-shell","title":"Step 2: Verify account logged in to the <code>IBM Cloud Shell</code>","text":""},{"location":"known-issues/#4-knative-unknown-flag-annotation-revision","title":"4. Knative  \"unknown flag: --annotation-revision\"","text":"<p>If you see following error in the IBM Cloud shell:</p> <p></p> <p>The reason is the Knative CLI must be updated inside the IBM Cloud shell. No task on your side.</p>"},{"location":"logging/","title":"Lab 4: Logging of the applications","text":"<p>Here we use the IBM Cloud Log Analysis (lite plan).</p>"},{"location":"logging/#create-the-logging-service-automatically","title":"Create the logging service automatically","text":"<p>Note: If you are using an <code>IBM Cloud TechZone Environment</code>, you can skip the <code>Create the logging service automatically</code> you don't need to create the service because the service exists.</p> <p>You can create the lite service instances for logging and monitoring by using this bash script <code>ce-create-monitoring-logging-services.sh</code></p> <pre><code>cd $ROOT_FOLDER/CE\nbash ce-create-monitoring-logging-services.sh\n</code></pre>"},{"location":"logging/#open-the-logging-for-all-applications","title":"Open the logging for all applications","text":""},{"location":"logging/#step-1-go-back-to-the-project-overview","title":"Step 1: Go back to the project overview","text":""},{"location":"logging/#step-2-select-actions-logging","title":"Step 2: Select <code>Actions -&gt; Logging</code>","text":"<p>In case you don't have an existing instance of <code>IBM Cloud Log Analysis</code> Code Engine, follow steps in <code>Create an IBM Cloud Log Analysis service manually</code> or use the <code>bash script</code>.</p>"},{"location":"logging/#step-3-verify-the-ibm-cloud-log-analysis-will-be-opened-in-the-browser","title":"Step 3: Verify the IBM Cloud Log Analysis will be opened in the browser","text":""},{"location":"logging/#create-an-ibm-cloud-log-analysis-service-manually","title":"Create an IBM Cloud Log Analysis service manually","text":""},{"location":"logging/#step-1-select-actions-add-logging","title":"Step 1: Select <code>Actions -&gt; Add logging</code>","text":"<p>In case you don't have an existing instance of <code>IBM Cloud Log Analysis</code>, Code Engine will automatically guide you to create a <code>lite plan</code> instance, when you select <code>Actions -&gt; Add logging</code>.</p> <p></p>"},{"location":"logging/#step-2-in-the-upcoming-dialog-select-lite-and-leave-the-defaults-selected-for-region-and-resource-group","title":"Step 2: In the upcoming dialog select <code>Lite</code> and leave the defaults selected for <code>region</code> and <code>resource group</code>.","text":"<p>Name the service instance <code>IBMCloudLogging-Code-Engine</code> and press <code>Create</code>.</p> <p></p>"},{"location":"logging/#step-3-refresh-your-browser-with-your-code-engine-project","title":"Step 3: Refresh your browser with your Code Engine project.","text":"<p>When the <code>IBM Cloud Log Analysis</code> is ready and you select <code>Actions -&gt; Add logging</code> again, the following dialog will appear. In this dialog you select your just created <code>IBM Cloud Log Analysis</code> service instance with the name <code>IBMCloudLogging-Code-Engine</code>.</p> <p></p> <p>Now you use the <code>IBM Cloud Log Analysis</code> service.</p>"},{"location":"logging/#configure-a-filter-for-the-logging","title":"Configure a filter for the logging","text":""},{"location":"logging/#step-1-select-code-engine-in-the-sources-tab","title":"Step 1: Select <code>Code Engine</code> in the <code>Sources</code> tab","text":""},{"location":"logging/#step-2-insert-log-as-a-text-filter","title":"Step 2: Insert <code>\"--&gt;log:\"</code> as a text filter","text":"<pre><code>\"--&gt;log:\"\n</code></pre>"},{"location":"logging/#step-3-invoke-the-frontend-application-several-times","title":"Step 3: Invoke the frontend application several times","text":"<p>In the gif you see an example result. Now you filter the custom console outputs of the microservices <code>web-api</code> and <code>articles</code>. If you want to can save it as a view in the <code>Log Analysis UI</code>.</p> <p></p> <p>For more details please use the IBM Cloud Code Engine documentation for logging</p> <p>Congratulations, you have successfully completed this hands-on lab <code>Logging of the applications</code> of the workshop. Awesome </p>"},{"location":"monitoring/","title":"Lab 3: Application Monitoring","text":"<p>Here we use the IBM Cloud Monitoring (lite plan) service.</p>"},{"location":"monitoring/#architecture","title":"Architecture","text":"<p>The following simplified architecture diagram show the dependencies of the <code>Code Engine project</code>, the <code>Quay Container Registry</code>, the <code>IBM Cloud Logging</code> and the <code>\u00ccBM Cloud Monitoring</code>.</p> <p></p>"},{"location":"monitoring/#create-the-monitoring-service-automatically","title":"Create the monitoring service automatically","text":"<p>Note: If you are using an <code>IBM Cloud TechZone Environment</code>, you can skip the <code>Create the monitoring service automatically</code> you don't need to create the service because the service exists.</p> <p>You can create the lite service instances for <code>logging</code> and <code>monitoring</code> by using this bash script <code>ce-create-monitoring-logging-services.sh</code>.</p> <pre><code>cd $ROOT_FOLDER/CE\nbash ce-create-monitoring-logging-services.sh\n</code></pre>"},{"location":"monitoring/#open-the-monitoring-for-all-applications","title":"Open the monitoring for all applications","text":""},{"location":"monitoring/#step-1-go-back-to-the-project-overview","title":"Step 1: Go back to the project overview","text":""},{"location":"monitoring/#step-2-select-actions-monitoring","title":"Step 2: Select <code>Actions -&gt; Monitoring</code>","text":"<p>In case you don't have an existing instance of <code>IBM Cloud Monitoring</code> Code Engine, follow steps in <code>Create an IBM Cloud Monitoring service manually</code> or use the <code>bash script</code>.</p> <p></p>"},{"location":"monitoring/#step-3-verify-that-ibm-cloud-monitoring-opens-in-the-browser","title":"Step 3: Verify that IBM Cloud Monitoring opens in the browser","text":""},{"location":"monitoring/#create-an-ibm-cloud-monitoring-service-manually","title":"Create an IBM Cloud Monitoring service manually","text":""},{"location":"monitoring/#step-1-select-add-monitoring","title":"Step 1: Select <code>Add monitoring</code>","text":"<p>In case you don't have an existing instance of <code>IBM Cloud Monitoring</code> Code Engine will automatically guide you to create a <code>lite plan</code> instance, when you select <code>Add monitoring</code>.</p> <p></p>"},{"location":"monitoring/#step-2-in-the-upcoming-dialog-select-lite-and-leave-the-defaults-selected-for-region-and-resource-group","title":"Step 2: In the upcoming dialog select <code>Lite</code> and leave the defaults selected for <code>region</code> and <code>resource group</code>","text":"<p>Name the service instance <code>IBMCloudMonitoring-Code-Engine</code> and press <code>Create</code>.</p> <p></p>"},{"location":"monitoring/#step-3-refresh-your-browser-with-your-code-engine-project","title":"Step 3: Refresh your browser with your Code Engine project.","text":"<p>Now you will notice that you can select <code>Actions -&gt; Monitoring</code>.</p> <p></p>"},{"location":"monitoring/#inspect-the-monitoring-posibilities","title":"Inspect the monitoring posibilities","text":""},{"location":"monitoring/#step-1-expore-the-given-monitoring-posibilities","title":"Step 1: Expore the given monitoring posibilities","text":"<p>For more details please use the IBM Cloud Code Engine documentation for monitoring.</p> <p></p> <p>Congratulations, you have successfully completed this hands-on lab <code>Application Monitoring</code> of the workshop. Awesome </p>"},{"location":"push-to-container-registry/","title":"Optional Lab 2: Push the example container images to a container image registry","text":"<p>In this optional lab we will push your example container images to a container image registry. We use the free Red Hat Quay.io as our example container registry. Quay has a Community Distribution that powers Red Hat Quay and Quay.io called Project QUAY You need to create a free account.</p> <p>You can also use the IBM Cloud Registry which has a free lite plan with limited resources of Storage (Gigabyte-Months):</p> <ul> <li>0.5 GB free per month and pull traffic (Gigabytes) </li> <li>5 GB free per month. Please visit the IBM Cloud Registry catalog for the current pricing.</li> </ul> <p>To run these optional exercises, you need to ensure you have installed the following tools on your local machine and you can run them in your terminal sessions.</p> <ul> <li>git 2.24.1 or higher</li> <li>Docker 3.0.4 or higher</li> <li>Podman Client / Server   4.1.0 / 4.3.0 or higher</li> </ul>"},{"location":"push-to-container-registry/#step-1-login-to-quay-on-your-local-machine","title":"Step 1: Login to Quay on your local machine","text":"<pre><code>[docker OR podman] login [quay.io OR docker.io]\n</code></pre>"},{"location":"push-to-container-registry/#step-2-ensure-root_path-variable-is-set-to-your_pathce-cns-of-your-cloned-repository","title":"Step 2: Ensure <code>$ROOT_PATH</code> variable is set to <code>YOUR_PATH/ce-cns</code> of your cloned repository","text":"<p>Display the <code>$ROOT_PATH</code> you set in <code>Lab 1: Setup the example application</code>.</p> <pre><code>echo $ROOT_PATH\n</code></pre> <p>You can use for example:</p> <pre><code>cd YOUR_PATH/ce-cns\nexport ROOT_PATH=$(pwd)\n</code></pre>"},{"location":"push-to-container-registry/#step-3-configure-articles","title":"Step 3: Configure articles","text":"<p>When you run the articles microservice on CE ensure you have uncommented <code>quarkus.http.port=8080</code> and <code>#quarkus.http.port=8083</code> commented out.</p> <pre><code>cd $ROOT_PATH/code/articles/src/main/resources\nnano application.properties\n</code></pre> <p>Example:</p> <pre><code># When running locally, uncomment the next line, add your Keycloak URL, must end on '/auth/realms/quarkus'\nquarkus.oidc.auth-server-url=http://localhost:8282/auth/realms/quarkus\n\nquarkus.oidc.client-id=backend-service\nquarkus.oidc.credentials.secret=secret\n\nquarkus.http.port=8080\n# When running locally, uncomment the next line, to use the port 8083\n# quarkus.http.port=8083\nquarkus.http.cors=true\n\nresteasy.role.based.security=true\n</code></pre>"},{"location":"push-to-container-registry/#step-4-export-your-container-registry-name-as-your-repository-name","title":"Step 4: Export your container registry name as your repository name","text":"<pre><code>export MY_REGISTRY=[quay.io OR docker.io]\n</code></pre>"},{"location":"push-to-container-registry/#step-5-export-your-quay-username-as-your-repository-name","title":"Step 5: Export your Quay username as your repository name","text":"<pre><code>export MY_REPOSITORY=YOUR_USERNAME\n</code></pre> <p>Note: In the image below you see an example where you can find the name, you should use.</p> <p></p>"},{"location":"push-to-container-registry/#step-6-execute-the-following-bash-automation","title":"Step 6: Execute the following bash automation","text":"<p>This bash script will build and push your container images to Red Hat Quay.io.</p> <p>Invoke the script with the parameter <code>podman</code> or <code>docker</code>.</p> <pre><code>cd $ROOT_PATH/CE\nbash container-image-build-and-push.sh podman\n</code></pre> <ul> <li>Example output:</li> </ul> <pre><code>************************************\n Display parameter\n************************************\n\nParameter count : podman\nParameter zero 'name of the script': container-image-build-and-push.sh\n---------------------------------\nLocal container engine   : podman\nRoot path                : /Users/thomassuedbroecker/Downloads/dev/ce-workshop-ibm/ce-cns\nContainer repository     : tsuedbroecker\nContainer registry       : quay.io\n-----------------------------\n*** Setup container engine to Podman!\n************************************\n</code></pre>"},{"location":"push-to-container-registry/#step-7-verify-the-public-access-for-your-containers","title":"Step 7: Verify the public access for your containers","text":"<p>Visit your repository on Red Hat Quay.io and verify your containers are available for public usage. This is only the case if you are going to run the same setup as given in <code>Lab 1: Setup the example application</code>.</p> <p></p>"},{"location":"push-to-container-registry/#step-8-update-the-ce-deploy-appssh-bash-script","title":"Step 8: Update the <code>ce-deploy-apps.sh</code> bash script","text":"<p>Now you have to reflect the changes you made for the container registry in the <code>ce-deploy-apps.sh</code>, if you plan to use this bash script to deploy your containers to <code>Code Engine</code>.</p> <ol> <li>Open the bash script with an editor</li> </ol> <pre><code>cd $ROOT_PATH/ce\nnano ce-deploy-apps.sh\n</code></pre> <ol> <li>In case you have just changed the repository name, you only have to replace <code>tsuedbroecker</code> with your value and it should work.</li> </ol> <pre><code>...\nexport PROJECT_NAME=$MYPROJECT\nexport RESOURCE_GROUP=default\nexport REPOSITORY=tsuedbroecker\n...\n</code></pre> <p>Congratulations, you have successfully completed this optional hands-on lab tasks for <code>Push the example containers to a container registry</code> section of the workshop. Awesome </p>"},{"location":"run-application-locally/","title":"Optional Lab 1: Run the example application locally","text":"<p>To run these optional exercises you need to ensure you have installed the following tools on your local machine and you can run them in your terminal sessions.</p> <ul> <li>git 2.24.1 or higher</li> <li>yarn 1.22.4 or higher</li> <li>Node.js v14.6.0 or higher</li> <li>Apache Maven 3.6.3</li> <li>Docker 3.0.4 or higher (running Keycloak locally)</li> <li>Java 9 or higher</li> </ul>"},{"location":"run-application-locally/#architecture","title":"Architecture","text":"<p>Here is the local architecture whichs shows the Web-App and the two microservices Web-API and Articles and Keycloak are running on your local machine in terminal sessions.</p> <p></p> <p>The gif shows the logon to the example web frontend application. This is the simplified sequence which happens in the background:</p> <ol> <li>When we invoke the web frontend on `http://localhost:8080 we will be routed to login dialog provided by the Keyloak server.</li> <li>After the successfull Keycloak authentication we will be redirected to the web frontend and the frontend gets an access-token.</li> <li>The access-token contains the needed information for the authorization at the Java microservice Web-API and the user information.</li> <li>The web frontend extracts and displays the username.</li> <li>Then the web fronted uses the access-token to invoke the Web-API Microservice endpoint to get the articles and displays them.</li> </ol> <p></p>"},{"location":"run-application-locally/#step-1-clone-the-project-to-your-local-machine","title":"Step 1: Clone the project to your local machine","text":"<pre><code>git clone https://github.com/thomassuedbroecker/ce-cns.git\ncd ce-cns\nROOT_FOLDER=$(pwd)\n</code></pre>"},{"location":"run-application-locally/#setup-keycloak-locally","title":"Setup Keycloak locally","text":"<p>In this part we will setup Keycloak locally. We will run a local Keycloak Docker container and reuse an existing realm configuration.</p> <p>The image below shows the relevant elements we will use later.</p> <p></p>"},{"location":"run-application-locally/#step-1-start-keycloak-docker-image-local","title":"Step 1: Start Keycloak Docker image local","text":"<p>Open the first terminal session and enter following command:</p> <pre><code>docker run -it -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8282:8080 jboss/keycloak:9.0.2\n</code></pre> <p>Note: We use here</p> <ul> <li><code>KEYCLOAK_USER=admin</code></li> <li><code>KEYCLOAK_PASSWORD=admin</code></li> <li><code>8282:8080</code> port forwarding</li> <li><code>keycloak:9.0.2</code> container image</li> </ul>"},{"location":"run-application-locally/#step-2-import-the-existing-realm-configuration","title":"Step 2: Import the existing realm configuration","text":"<ol> <li>Open the Keycloak in a browser and select the Administration Console</li> </ol> <p>Use the following URL:</p> <pre><code>http://localhost:8282/\n</code></pre> <p></p> <ol> <li> <p>Login to using the URL in your browser with <code>user/admin</code> and <code>password/admin</code></p> </li> <li> <p>Select Add realm</p> </li> </ol> <p></p> <ol> <li>Choose for import Select file and open the <code>cns-realm.json</code>.</li> </ol> <p></p>"},{"location":"run-application-locally/#step-3-press-view-all-users","title":"Step 3: Press <code>view all users</code>","text":"<p>You should see the following users: <code>admin</code>, <code>alice</code>, <code>jdoe</code></p> <p></p>"},{"location":"run-application-locally/#step-4-verify-the-role-mapping","title":"Step 4: Verify the role mapping","text":""},{"location":"run-application-locally/#setup-web-app","title":"Setup Web-App","text":""},{"location":"run-application-locally/#step-1-configure-web-app","title":"Step 1: Configure web-app","text":"<p>The web-app is preconfigured for local usage of Keycloak (<code>http://localhost:8282/auth</code>) and web-api (<code>http://localhost:8082/articles</code>) and save the changes. (Link to main.js file)</p> <pre><code>cd $ROOT_FOLDER/code/web-app/src\nnano main.js\n</code></pre> <p>Example:</p> <pre><code>if (currentHostname.indexOf('localhost') &gt; -1) {\n  console.log(\"--&gt; log: option 1\");\n  urls = {\n    api: 'http://localhost:8082',\n    login: 'http://localhost:8282/auth',\n    cns: 'http://localhost:8080'\n  }\n  store.commit(\"setAPIAndLogin\", urls);\n}\n</code></pre>"},{"location":"run-application-locally/#step-2-run-the-web-app","title":"Step 2: Run the web-app","text":"<p>Open the second terminal session and start the application on port 8081.</p> <pre><code>cd $ROOT_FOLDER/code/web-app\nyarn install\nyarn serve\n</code></pre>"},{"location":"run-application-locally/#setup-web-api","title":"Setup Web-Api","text":""},{"location":"run-application-locally/#step-1-configure-web-api","title":"Step 1: Configure web-api","text":"<p>When we run the example application locally, we don't need to change the source code for the web-api microservce. (Link to application.properties file)</p> <pre><code>cd $ROOT_FOLDER/code/web-api/src/main/resources\nnano application.properties\n</code></pre> <p>Example:</p> <pre><code># When running locally, uncomment the next line, add your Keycloak URL, must end on '/auth/realms/quarkus'\nquarkus.oidc.auth-server-url=${QUARKUS_OIDC_AUTH_SERVER_URL:'http://localhost:8282/auth/realms/quarkus'}\n\nquarkus.oidc.client-id=backend-service\nquarkus.oidc.credentials.secret=secret\n\nquarkus.http.port=8082\nquarkus.http.cors=true\n\norg.eclipse.microprofile.rest.client.propagateHeaders=Authorization\n\ncns.articles-url=${CNS_ARTICLES_URL:'http://localhost:8083/articles'}\n</code></pre>"},{"location":"run-application-locally/#step-2-run-the-web-api-microservice","title":"Step 2: Run the web-api Microservice","text":"<p>Open a third terminal and start the service on port 8082.</p> <pre><code>cd $ROOT_FOLDER/code/web-api\nmvn clean package quarkus:dev\n</code></pre>"},{"location":"run-application-locally/#setup-articles-microservice","title":"Setup Articles microservice","text":""},{"location":"run-application-locally/#step-1-configure-articles","title":"Step 1: Configure articles","text":"<p>When you run the articles microservice locally ensure you have uncommented <code>quarkus.http.port=8083</code> and <code>#quarkus.http.port=8080</code> commented out. ((Link to application.properties file)</p> <pre><code>cd $ROOT_FOLDER/code/articles/src/main/resources\nnano application.properties\n</code></pre> <p>Example:</p> <pre><code># When running locally, uncomment the next line, add your Keycloak URL, must end on '/auth/realms/quarkus'\nquarkus.oidc.auth-server-url=http://localhost:8282/auth/realms/quarkus\n\nquarkus.oidc.client-id=backend-service\nquarkus.oidc.credentials.secret=secret\n\n# quarkus.http.port=8080\n# When running locally, uncomment the next line, to use the port 8083\nquarkus.http.port=8083\nquarkus.http.cors=true\n\nresteasy.role.based.security=true\n</code></pre>"},{"location":"run-application-locally/#step-2-run-the-articles-microservice","title":"Step 2: Run the articles Microservice","text":"<p>Open a fourth terminal and start the service on port 8083.</p> <pre><code>cd $ROOT_FOLDER/code/articles\nmvn clean package quarkus:dev\n</code></pre>"},{"location":"run-application-locally/#open-the-web-app","title":"Open the Web-App","text":""},{"location":"run-application-locally/#step-1-open-the-web-app-in-your-local-browser","title":"Step 1: Open the Web-App in your local browser","text":"<p>Open the following URL in your browser:</p> <pre><code>http://localhost:8080\n</code></pre>"},{"location":"run-application-locally/#step-2-log-in-with-the-test-user-alice-password-alice","title":"Step 2: Log in with the test user: alice, password: alice","text":""},{"location":"run-application-locally/#observe-the-running-application","title":"Observe the running application","text":"<p>Congratulations, you have successfully completed this optional hands-on lab tasks for <code>Authentication and Authorization with Keycloak and Quarkus</code> section of the workshop. Awesome </p>"},{"location":"setup-example/","title":"Lab 1: Setup the example application","text":""},{"location":"setup-example/#ibm-cloud-account","title":"IBM Cloud Account","text":""},{"location":"setup-example/#step-1-create-a-payasyougo-ibm-cloud-account","title":"Step 1: Create a <code>PayAsYouGo</code> IBM Cloud Account","text":"<p>Open this link and follow the guided steps.</p> <p><code>Code Engine</code> has a <code>free tier</code> per month and we expect, if you haven't used that <code>free tier</code> in current month, you can execute the workshop without creating any additional costs. For the monitoring and logging we will use free <code>lite plans</code> for the service instances of IBM Cloud Monitoring and   IBM Cloud Log Analysis.</p> <p>Here you find the actual <code>Code Engine</code> pricing. The image blow shows a screen shot from <code>26. May 2021</code> of the <code>free tier</code>.</p> <p></p>"},{"location":"setup-example/#optional-use-techzone","title":"Optional: Use TechZone","text":"<p>If you are an IBM Partner or an IBMer you can use TechZone  to reserve an IBM Cloud environment for the workshop. You find the details in the additional resources of the workshop documentation for TechZone. </p>"},{"location":"setup-example/#architecture","title":"Architecture","text":"<p>The following simplified architecture diagram show the dependencies of the <code>Code Engine project</code> and the <code>Quay Container Registry</code>.</p> <p></p>"},{"location":"setup-example/#create-code-engine-project","title":"Create <code>Code Engine</code> project","text":"<p>Note: If you are using an <code>IBM Cloud TechZone Environment</code>, you can skip the <code>Create Code Engine project</code> and replace the project name with the specified <code>Code Engine project name</code> for your <code>IBM Cloud TechZone Environment</code>.</p>"},{"location":"setup-example/#step-1-log-on-to-ibm-cloud-and-navigate-to-the-code-engine-projects","title":"Step 1: Log on to IBM Cloud and navigate to the Code Engine projects","text":"<p>Use following link to directly navigate to the Code Engine projects in IBM Cloud.</p> <p>https://cloud.ibm.com/codeengine/projects</p>"},{"location":"setup-example/#step-2-navigate-to-code-engine-projects-in-ibm-cloud-and-press-create","title":"Step 2: Navigate to Code Engine projects in IBM Cloud and press <code>Create</code>","text":""},{"location":"setup-example/#step-3-create-a-code-engine-project-called-cloud-native-starter-your-extention","title":"Step 3: Create a <code>Code Engine</code> project called <code>cloud-native-starter-[YOUR-EXTENTION]</code>","text":"<p>Enter following values, select create and wait until your project is created.</p> <ul> <li>Location      : <code>Dallas</code></li> <li>Name          : <code>cloud-native-starter-[YOUR-EXTENTION]</code> (The name must be unique in the in Cloud Location <code>Dallas</code>)</li> <li>Resource group: <code>default</code></li> </ul> <p></p> <p>The image below shows the created <code>Code Engine</code> project.</p> <p></p>"},{"location":"setup-example/#ibm-cloud-shell","title":"<code>IBM Cloud Shell</code>","text":""},{"location":"setup-example/#step-1-open-the-ibm-cloud-shell","title":"Step 1: Open the <code>IBM Cloud Shell</code>","text":"<p>When using the IBM Cloud Shell, no client-side setup is required for this workshop, it comes with all necessary CLIs (command line tools).</p> <p>Use following link to directly open the <code>IBM Cloud Shell</code>.</p> <p>https://cloud.ibm.com/shell</p> <p>In your browser, log in to the IBM Cloud Dashboard and open the IBM Cloud Shell from here:</p> <p></p> <p>Note: Your workspace includes 500 MB of temporary storage. This session will close after an hour of inactivity. If you don't have any active sessions for an hour or you reach the 50-hour weekly usage limit, your workspace data is removed.</p>"},{"location":"setup-example/#step-2-ibm-cloud-shell","title":"Step 2: <code>IBM Cloud Shell</code>","text":"<p>Now you are logged on with your IBM Cloud account.</p> <p></p>"},{"location":"setup-example/#deploy-the-example-application","title":"Deploy the example application","text":""},{"location":"setup-example/#step-1-clone-the-github-project-to-the-ibm-cloud-shell","title":"Step 1: Clone the GitHub project to the <code>IBM Cloud Shell</code>","text":"<p>Insert these commands to clone the GitHub project to the <code>IBM Cloud Shell</code>.</p> <pre><code>git clone https://github.com/ibm/ce-cns.git\ncd ce-cns\nROOT_FOLDER=$(pwd)\n</code></pre>"},{"location":"setup-example/#step-2-now-set-the-environment-variable-for-later-usage","title":"Step 2: Now set the environment variable for later usage","text":"<p>REMEMBER! Your Code Engine project name <code>cloud-native-starter-[YOUR-EXTENTION]</code></p> <pre><code>export MYPROJECT=cloud-native-starter-[YOUR-EXTENTION]\n</code></pre> <p>Note: In case you are using an <code>IBM Cloud TechZone Environment</code>, please execute following commands to set the right environment.</p> <pre><code>export MYPROJECT=&lt;project from email&gt;\nexport REGION=&lt;region from email&gt;\nexport RESOURCE_GROUP=&lt;rg from email&gt;\n</code></pre>"},{"location":"setup-example/#step-3-execute-following-bash-automation","title":"Step 3: Execute following bash automation","text":"<p>Be patient, because the script may take several minutes (up to 10 min).</p> <pre><code>cd $ROOT_FOLDER/CE\nbash ce-deploy-apps.sh\n</code></pre> <p>Note: Here are the <code>default values</code> for the  <code>ce-deploy-apps.sh</code> script:</p> <pre><code>export PROJECT_NAME=$MYPROJECT #your project name\nexport RESOURCE_GROUP=default #the resource group in IBM Cloud you defined during the creation of the project\nexport REPOSITORY=tsuedbroecker #the name of the public container repository on Quay\nexport REGION=\"us-south\" #the region in IBM Cloud that is used. When you choose Dallas as location during the creation of the project the region is \"us-south\"\n</code></pre> <p>If you plan to use a different configuration, you need ajust these variables to your needs. For more details please visit the bash script: <code>ce-deploy-apps.sh</code>. The bash script uses for example the <code>ibmcloud target -g</code> command to target <code>IBM Cloud Resouce Group</code>.</p> <pre><code>ibmcloud target -g $RESOURCE_GROUP\n</code></pre>"},{"location":"setup-example/#step-4-simplified-steps-of-the-bash-script","title":"Step 4: Simplified steps of the bash script","text":"<p>Here are the simplified steps that are carried out in the bash script using mainly the IBM Cloud <code>Code Engine CLI</code>:</p> <ol> <li>Connect to the <code>Code Engine project</code> with the  Code Engine CLI and get the namespace for later usage to define the internal route.</li> <li>Deploy <code>web-app</code> to get needed route for the redirect of Keycloak </li> <li>Deploy <code>Keycloak</code> simply as a container (that's the reason why not scale to zero (stateful)) </li> <li>Configure the <code>Keycloak</code> realm json file based on the <code>web-app</code> url and create realm.</li> <li>Deploy <code>articles</code> microservice which is defined as <code>local cluster</code> here, we need to know the <code>namespace</code>. (details are related to Knative)</li> <li>Deploy <code>web-api</code> with the needed <code>Keycloak</code> and <code>articles</code> urls as environment variables.</li> <li>Reconfigure <code>web-app</code> with the needed <code>Keycloak</code> and web-api urls as environment variables.</li> <li>Configure the application scale to zero timeframe using a Knative annotation :<code>kn service update articles --annotation-revision autoscaling.knative.dev/scaleToZeroPodRetentionPeriod=5m</code></li> </ol> <p>PS: You can also use the <code>ce-deploy-apps-secret.sh</code> script, which does create secrets for the user and password for the Keycloak container.</p> <pre><code>cd $ROOT_FOLDER/CE\nbash ce-deploy-apps-secret.sh\n</code></pre>"},{"location":"setup-example/#step-5-inspect-the-output","title":"Step 5: Inspect the output","text":"<p>The following shows an example execution result of the bash script and the last four lines do contain the routes to the applications.</p> <pre><code>************************************\n URLs\n************************************\n - Keycloak : https://keycloak.9xztp8web0h.us-south.codeengine.appdomain.cloud/auth/admin/master/console/#/realms/quarkus\n - Web-API  : https://web-api.9xztp8web0h.us-south.codeengine.appdomain.cloud\n - Articles : http://articles.9xztp8web0h.svc.cluster.local/articles\n - Web-App  : https://web-app.9xztp8web0h.us-south.codeengine.appdomain.cloud\n</code></pre> <p>You can open the example application with the <code>Web-App</code> link. Copy the link and open the link in a browser.</p>"},{"location":"setup-example/#step-6-open-the-example-application-in-your-browser-and-log-in","title":"Step 6: Open the example application in your browser and log in","text":"<p>Use <code>user: alice</code> and <code>password: alice</code> for the logon.</p> <p></p> <p>Because of scale to zero it could be that the first invocation of the articles cloud take longer. If instead of a Login-Screen you get a \"We are sorry, page not found\" error, please refer to the known issues page.</p>"},{"location":"setup-example/#step-7-verify-that-the-articles-are-displayed-in-the-browser","title":"Step 7: Verify that the articles are displayed in the browser","text":"<p>If you see the following page, please reload the browser. Remember, this can take time, because all applications need to be available. </p> <p></p> <p>If the issue persists, please refer to the known issues page.</p> <p>Congratulations, you have successfully completed this hands-on lab <code>Setup the example application</code> of the workshop. Awesome </p>"},{"location":"techzone/","title":"Reserve a TechZone environment","text":""},{"location":"techzone/#step-1-open-the-techzone-asset","title":"Step 1: Open the TechZone asset","text":""},{"location":"techzone/#step-2-select-the-environments-section-of-the-asset","title":"Step 2: Select the environments section of the asset","text":""},{"location":"techzone/#step-3-create-a-reservation","title":"Step 3: Create a reservation","text":"<p>In <code>Create a reservation</code> example you can chose <code>Reserve now</code> as type for your reservation</p> <p></p>"},{"location":"techzone/#step-4-fill-out-the-reservation-form-and-press-submit","title":"Step 4: Fill out the reservation form and press <code>Submit</code>","text":""},{"location":"techzone/#step-5-verify-your-reservation-confirmation","title":"Step 5: Verify your reservation confirmation","text":""},{"location":"techzone/#step-6-verify-the-status-of-your-reservation","title":"Step 6: Verify the status of your reservation","text":""},{"location":"techzone/#step-7-verify-the-email-you-got-from-techzone","title":"Step 7: Verify the email you got from Techzone","text":"<p>In the mail you will find the relevant information for the IBM Cloud environment you got for that workshop.</p> <p></p>"},{"location":"techzone/#step-8-ensure-you-are-in-the-ibm-cloud-account","title":"Step 8: Ensure you are in the IBM Cloud account","text":"<p>Note: If this doesn't work, please verify the content of your mail again.</p>"}]}